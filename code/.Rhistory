value = 0 ) )
) %>%
hc_plotOptions(column = list(
dataLabels = list(enabled = F),
#stacking = "normal",
enableMouseTracking = T )
)%>%
hc_tooltip(table = TRUE,
sort = TRUE,
pointFormat = paste0( '<br> <span style="color:{point.color}">\u25CF</span>',
" {series.name}: {point.y} mm"),
headerFormat = '<span style="font-size: 13px">Year {point.key}</span>'
) %>%
hc_legend( layout = 'vertical', align = 'left', verticalAlign = 'top', floating = T, x = 100, y = 000 )
plot
}
runApp('E:/Farmer dashboard/Farmer_Dashboard')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
tinytex::parse_install("filename.log"
tinytex::parse_install("filename.log")
tinytex::parse_install("filename.log")
tinytex::parse_packages(
text = "! LaTeX Error: File `ocgbase.sty' not found."
)
runApp('E:/Farmer dashboard/Farmer_Dashboard')
install.packages('tinytex')
install.packages("tinytex")
shiny::runApp('E:/Farmer dashboard/Farmer_Dashboard')
install.packages('htmlwidget')
install.packages('htmlwidget')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
shiny::runApp('E:/Farmer dashboard/Farmer_Dashboard')
#knitr::include_graphics("plot1")
HTML("<br>")
#disp
plot1
runApp('E:/Farmer dashboard/Farmer_Dashboard')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
devtools::install_github('yihui/knitr')
devtools::install_github('yihui/knitr')
devtools::install_github('yihui/knitr')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
rmarkdown::pandoc_version()
rmarkdown::find_pandoc(version = "2.9.1")
rmarkdown::find_pandoc(version = "2.11.4")
rmarkdown::find_pandoc(cache = FALSE)
runApp('E:/Farmer dashboard/Farmer_Dashboard')
install.packages('rCharts')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
install.packages('slidify')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
install_github("ramnathv/rCharts")
runApp('E:/Farmer dashboard/Farmer_Dashboard')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
runApp('E:/Farmer dashboard/Farmer_Dashboard')
install.packages('learnr')
install.packages('highcharter')
install.packages('flexdashboard')
install.packages('shiny')
install.packages('bench')
install.packages('magrittr')
install.packages('dygraphs')
shiny::runApp('E:/GCA Project/code')
runApp()
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
runApp()
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
shiny::runApp('E:/GCA Project/code')
runApp()
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
shiny::runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
runApp()
runApp('E:/GCA Project/code')
runApp('E:/GCA Project/code')
shiny::runApp('E:/GCA Project/code')
shiny::runApp('C:/Users/HP/Desktop/CWR/cwr1')
install.packages('curl')
install.packages("curl")
library()
shiny::runApp('C:/Users/HP/Desktop/CWR/cwr1')
runApp('C:/Users/HP/Desktop/CWR/cwr1')
shiny::runApp('C:/Users/HP/Desktop/CWR/cwr1')
runApp('E:/undp_gca/code')
shiny::runApp('E:/undp_gca/code')
runApp('C:/Users/HP/Desktop/CWR/cwr1')
install.packages('shiny')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("leaflet")
install.packages("leaflet.mapboxgl")
shiny::runApp('C:/Users/HP/Desktop/CWR/cwr1')
# an example of app.R
library(shiny)
ui <- fluidPage(
# Application title
titlePanel("My app"),
# Sidebar with a slider input widget
sidebarLayout(
sidebarPanel(
sliderInput("input_1")
),
# Show a plot
mainPanel(
plotOutput("my_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
plot_1 <- reactive({
plot_func(param = input_1)
})
output$my_plot <- renderPlot({
plot_1()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# an example of app.R
library(shiny)
ui <- fluidPage(
# Application title
titlePanel("My app"),
# Sidebar with a slider input widget
sidebarLayout(
sidebarPanel(
sliderInput("input_1")
),
# Show a plot
mainPanel(
plotOutput("my_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
plot_1 <- reactive({
plot_func(param = input_1)
})
output$my_plot <- renderPlot({
plot_1()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# an example of app.R
library(shiny)
ui <- fluidPage(
# Application title
titlePanel("My app"),
# Sidebar with a slider input widget
sidebarLayout(
sidebarPanel(
sliderInput("input_1")
),
# Show a plot
mainPanel(
plotOutput("my_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
plot_1 <- reactive({
plot_func(param = input_1)
})
output$my_plot <- renderPlot({
plot_1()
})
}
# Run the application
shinyApp(ui = ui, server = server)
# an example of app.R
library(shiny)
ui <- fluidPage(
# Application title
titlePanel("My app"),
# Sidebar with a slider input widget
sidebarLayout(
sidebarPanel(
sliderInput("input_1")
),
# Show a plot
mainPanel(
plotOutput("my_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
plot_1 <- reactive({
plot_func(param = input_1)
})
output$my_plot <- renderPlot({
plot_1()
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("My app"),
# Sidebar with a slider input widget
sidebarLayout(
sidebarPanel(
sliderInput("input_1")
),
# Show a plot
mainPanel(
plotOutput("my_plot")
)
)
)
# an example of app.R
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# an example of app.R
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 5000,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# an example of app.R
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 500,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#install the RNCEP, lubridate and tidyverse packages
if(!require("RNCEP")) install.packages("RNCEP")
if(!require("lubridate")) install.packages("lubridate")
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("sf")) install.packages("sf")
#load the packages
library(RNCEP)
library(lubridate) #date and time manipulation
library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf) #to import a spatial object and to work with geom_sf in ggplot2
library(RNCEP)
library(lubridate) #date and time manipulation
library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RNCEP)
library(lubridate) #date and time manipulation
#library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf)
install.packages("sf")
install.packages("sf")
library(RNCEP)
library(lubridate) #date and time manipulation
#library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf)
install.packages("rcolo")
install.packages('RColorBrewer')
#load the packages
library(RNCEP)
library(lubridate) #date and time manipulation
#library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf) #to import a spatial object and to work with geom_sf in ggplot2
#load the packages
library(maps)
library(RNCEP)
library(lubridate) #date and time manipulation
#library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf)
#install the RNCEP, lubridate and tidyverse packages
#if(!require("RNCEP")) install.packages("RNCEP")
#if(!require("lubridate")) install.packages("lubridate")
#if(!require("tidyverse")) install.packages("tidyverse")
#if(!require("sf")) install.packages("sf")
#load the packages
library(maps)
library(RNCEP)
library(lubridate) #date and time manipulation
#library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf) #to import a spatial object and to work with geom_sf in ggplot2
#define the necessary arguments
month_range <- c(1,12)     #period of months
year_range <- c(2016,2016) #period of years
lat_range <- c(30,60)      #latitude range
lon_range <- c(-30,50)     #longitude range
data <- NCEP.gather("air",    #name of the variable
850, #pressure level 850hPa
month_range,year_range,
lat_range,lon_range,
return.units = TRUE,
reanalysis2=TRUE)
shiny::runApp('E:/undp_gca/code')
head(date_time)
head(date_time)
mnames(data)[[3]]
#date_time <- ymd_h(date_time)
#head(date_time)
dim(data)
#install the RNCEP, lubridate and tidyverse packages
#if(!require("RNCEP")) install.packages("RNCEP")
#if(!require("lubridate")) install.packages("lubridate")
#if(!require("tidyverse")) install.packages("tidyverse")
#if(!require("sf")) install.packages("sf")
#load the packages
library(maps)
library(RNCEP)
library(lubridate) #date and time manipulation
#library(tidyverse) #data manipulation and visualization
library(RColorBrewer) #color schemes
library(sf) #to import a spatial object and to work with geom_sf in ggplot2
#define the necessary arguments
month_range <- c(1,12)     #period of months
year_range <- c(2016,2016) #period of years
lat_range <- c(30,60)      #latitude range
lon_range <- c(-30,50)     #longitude range
data <- NCEP.gather("air",    #name of the variable
850, #pressure level 850hPa
month_range,year_range,
lat_range,lon_range,
return.units = TRUE,
reanalysis2=TRUE)
dim(data)
shiny::runApp('E:/undp_gca/code')
runApp()
runApp('E:/undp_gca/code')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: http://", '127.0.0.1', ":3838/"))
runApp(folder_address, launch.browser=FALSE, port = 3838, host = '127.0.0.1')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: http://", '127.0.0.1', ":3838/"))
runApp(folder_address, launch.browser=FALSE, port = 3838, host = '127.0.0.1')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: http://", '127.0.0.1', ":3838/"))
runApp(folder_address, launch.browser=FALSE, port = 3838, host = '127.0.0.1')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: https://", '127.0.0.1', ":3838/"))
runApp(folder_address, launch.browser=FALSE, port = 3838, host = '127.0.0.1')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: https://", '127.0.0.1', ":3838/"))
runApp(folder_address, launch.browser=TRUE, port = 3838, host = '127.0.0.1')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: https://", 'ip', ":3838/"))
runApp(folder_address, launch.browser=TRUE, port = 3838, host = 'ip')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: https://", ip, ":3838/"))
runApp(folder_address, launch.browser=TRUE, port = 3838, host = ip)
#print(paste0("the Shiny Web application runs on: https://", '127.0.0.1', ":3838/"))
#runApp(folder_address, launch.browser=TRUE, port = 3838, host = '127.0.0.1')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: https://", ip, ":4040/"))
runApp(folder_address, launch.browser=TRUE, port = 4040, host = ip)
#print(paste0("the Shiny Web application runs on: https://", '127.0.0.1', ":3838/"))
#runApp(folder_address, launch.browser=TRUE, port = 3838, host = '127.0.0.1')
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: https://", ip, ":3838/"))
runApp(folder_address, launch.browser=TRUE, port = 3838, host = ip)
#print(paste0("the Shiny Web application runs on: https://", '127.0.0.1', ":3838/"))
#runApp(folder_address, launch.browser=TRUE, port = 3838, host = '127.0.0.1')
equire(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: http://", ip, ":1234/"))
runApp(folder_address, launch.browser=FALSE, port = 1234, host = ip)
require(shiny)
folder_address = 'E://undp_gca//code'
x <- system("ipconfig", intern=TRUE)
z <- x[grep("IPv4", x)]
ip <- gsub(".*? ([[:digit:]])", "\\1", z)
print(paste0("the Shiny Web application runs on: http://", ip, ":1234/"))
runApp(folder_address, launch.browser=TRUE, port = 1234, host = ip)
